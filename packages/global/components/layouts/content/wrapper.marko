import hierarchyAliases from "@parameter1/base-cms-marko-web/utils/hierarchy-aliases";
import { getAsArray, get } from "@parameter1/base-cms-object-path";
import defaultValue from "@parameter1/base-cms-marko-core/utils/default-value";

$ const { id, type, pageNode } = input;
$ const { GAM } = out.global;

$ const withAds = defaultValue(input.withAds, true);
$ const sections = getAsArray(input, "sections");
$ const alias = get(input, "primarySection.alias");
$ const loadMore = defaultValue(input.loadMore, true);

<theme-content-page id=id type=type>
  <@head>
    <marko-web-gtm-content-context|{ context }| id=id>
      <marko-web-gtm-push data=context />
    </marko-web-gtm-content-context>
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      <marko-web-p1-events-track-content node=content />
    </marko-web-resolve-page>
  </@head>
  <if(GAM.enableRevealAd && withAds)>
    <@above-container>
      <marko-web-resolve-page|{ data: content }| node=pageNode>
        <!-- Get and handle conent labels -->
        $ const labels = getAsArray(content, "labels");
        $ const isSponsored = labels.includes("Sponsored");
        $ const isPremium = labels.includes('Premium');
        $ const aliases = hierarchyAliases(content.primarySection);
        <!-- for now only do something special with content primaried here -->
        $ const gamDisabledByAlias = getAsArray(GAM, "disableOnAliases").some((alias) => aliases.includes(alias));
        <if(withAds && !isSponsored && !isPremium && !gamDisabledByAlias)>
          <global-reveal-ad-handler select-all-targets=true path=GAM.getAdUnit({ name: "reskin", aliases }).path id="reveal-ad" />
          <theme-gam-define-display-ad
            name="reskin-mobile"
            position="content_page"
            aliases=aliases
            modifiers=["inter-block"]
          />
        </if>
      </marko-web-resolve-page>
    </@above-container>
  </if>
  <@page>
    <marko-web-resolve-page|{ data: content }| node=pageNode>
      $ const aliases = hierarchyAliases(content.primarySection);
      $ const authors = getAsArray(content, "authors.edges").map((edge) => edge.node);
      <marko-web-page-wrapper>
        <for|s| of=sections>
          <@section|{ blockName }| modifiers=s.modifiers>
            <${s.renderBody}
              block-name=blockName
              content=content
              aliases=aliases
              authors=authors
            />
          </@section>
        </for>
      </marko-web-page-wrapper>
    </marko-web-resolve-page>
  </@page>
  <@below-page>
    <if(!["page", "company"].includes(type) && loadMore)>
      <marko-web-page-container for="content" tag="div" id=id type=type modifiers=["below"]>
        <marko-web-resolve-page|{ data: content, resolved }| node=pageNode>
          $ const aliases = hierarchyAliases(content.primarySection);
          <marko-web-page-wrapper>
            <@section>
              <global-section-feed-wrapper aliases=aliases alias=content.primarySection.alias>
                <@header>More in ${content.primarySection.name}</@header>
                <@query-params excludeContentIds=[content.id] />
              </global-section-feed-wrapper>
            </@section>
          </marko-web-page-wrapper>
        </marko-web-resolve-page>
      </marko-web-page-container>
    </if>
    <if(withAds)>
      <marko-web-resolve-page|{ data: content }| node=pageNode>
        <theme-fixed-ad-bottom aliases=hierarchyAliases(content.primarySection) />
      </marko-web-resolve-page>
    </if>
  </@below-page>
</theme-content-page>
